// MongoDB Realm Web SDK ÊúçÂãô
import * as Realm from 'realm-web';
import { Poop, Friend, FriendRequest } from '../types';

// Realm ÈÖçÁΩÆ
const REALM_APP_ID = import.meta.env.VITE_MONGODB_REALM_APP_ID || '';

let app: Realm.App | null = null;
let user: Realm.User | null = null;

// ÂàùÂßãÂåñ Realm App
const initRealmApp = () => {
  if (!app && REALM_APP_ID) {
    app = new Realm.App({ id: REALM_APP_ID });
  }
  return app;
};

// ÂåøÂêçÁôªÂÖ•
const loginAnonymously = async (): Promise<Realm.User> => {
  const realmApp = initRealmApp();
  if (!realmApp) throw new Error('Realm App not initialized');

  if (!user || !user.isLoggedIn) {
    user = await realmApp.logIn(Realm.Credentials.anonymous());
  }
  return user;
};

// Áç≤Âèñ MongoDB ÊúçÂãô
const getMongoDBService = async () => {
  const currentUser = await loginAnonymously();
  return currentUser.mongoClient('mongodb-atlas');
};

// ‰æø‰æøÁõ∏ÈóúÊìç‰Ωú
export const savePoopToRealm = async (poop: Poop): Promise<string> => {
  try {
    const mongodb = await getMongoDBService();
    const collection = mongodb.db('poopmap').collection('poops');

    const document = {
      ...poop,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const result = await collection.insertOne(document);
    console.log('‚úÖ Poop saved to MongoDB Realm:', result.insertedId);
    return result.insertedId.toString();
  } catch (error) {
    console.error('‚ùå Failed to save poop to MongoDB Realm:', error);
    throw error;
  }
};

export const getUserPoopsFromRealm = async (userEmail: string): Promise<Poop[]> => {
  try {
    const mongodb = await getMongoDBService();
    const collection = mongodb.db('poopmap').collection('poops');

    const poops = await collection.find(
      { userId: userEmail },
      { sort: { timestamp: -1 } }
    );

    console.log(`‚úÖ Fetched ${poops.length} poops for user ${userEmail} from MongoDB Realm`);
    return poops as Poop[];
  } catch (error) {
    console.error('‚ùå Failed to fetch user poops from MongoDB Realm:', error);
    throw error;
  }
};

export const getFriendsPoopsFromRealm = async (friendEmails: string[]): Promise<Poop[]> => {
  if (friendEmails.length === 0) return [];

  try {
    const mongodb = await getMongoDBService();
    const collection = mongodb.db('poopmap').collection('poops');

    const poops = await collection.find(
      {
        userId: { $in: friendEmails },
        privacy: { $in: ['friends', 'public'] }
      },
      { sort: { timestamp: -1 } }
    );

    console.log(`‚úÖ Fetched ${poops.length} friends poops from MongoDB Realm`);
    return poops as Poop[];
  } catch (error) {
    console.error('‚ùå Failed to fetch friends poops from MongoDB Realm:', error);
    throw error;
  }
};

// ÂÖ¨Èñã‰æø‰æøÊü•Ë©¢Á∑©Â≠ò
let publicPoopsCache: { data: Poop[]; timestamp: number } | null = null;
const PUBLIC_POOPS_CACHE_DURATION = 5 * 60 * 1000; // 5 ÂàÜÈêòÁ∑©Â≠ò

export const getPublicPoopsFromRealm = async (): Promise<Poop[]> => {
  // ‰ΩøÁî®Á∑©Â≠òÔºåÊ∏õÂ∞ë API Ë™øÁî®
  if (publicPoopsCache && 
      Date.now() - publicPoopsCache.timestamp < PUBLIC_POOPS_CACHE_DURATION) {
    console.log(`‚úÖ Using cached public poops (${publicPoopsCache.data.length} items)`);
    return publicPoopsCache.data;
  }

  try {
    const mongodb = await getMongoDBService();
    const collection = mongodb.db('poopmap').collection('poops');

    const poops = await collection.find(
      { privacy: 'public' },
      { 
        sort: { timestamp: -1 },
        limit: 50
      }
    );

    // Á∑©Â≠òÁµêÊûú
    publicPoopsCache = {
      data: poops as Poop[],
      timestamp: Date.now()
    };

    console.log(`‚úÖ Fetched ${poops.length} public poops from MongoDB Realm (cached for 5min)`);
    return poops as Poop[];
  } catch (error) {
    console.error('‚ùå Failed to fetch public poops from MongoDB Realm:', error);
    throw error;
  }
};

// Ê™¢Êü• Realm ÈÄ£Êé•
export const checkRealmConnection = async (): Promise<boolean> => {
  try {
    const realmApp = initRealmApp();
    if (!realmApp) return false;

    await loginAnonymously();
    console.log('‚úÖ MongoDB Realm connection successful');
    return true;
  } catch (error) {
    console.warn('üî¥ MongoDB Realm connection failed:', error);
    return false;
  }
};

// ÂØ¶ÊôÇË®ÇÈñ±ÔºàRealm ÊîØÊåÅÔºâ
export const subscribeToUserPoopsInRealm = (userEmail: string, callback: (poops: Poop[]) => void) => {
  console.log(`üîÑ Setting up Realm subscription for user poops: ${userEmail}`);
  
  // Realm ÊîØÊåÅÂØ¶ÊôÇË®ÇÈñ±Ôºå‰ΩÜÈúÄË¶ÅÈÖçÁΩÆ
  // ÈÄôË£°ÂÖàÁî®Ëº™Ë©¢Êõø‰ª£
  const pollForChanges = async () => {
    try {
      const poops = await getUserPoopsFromRealm(userEmail);
      callback(poops);
    } catch (error) {
      console.error('‚ùå Error in Realm polling:', error);
    }
  };

  const interval = setInterval(pollForChanges, 30000);

  return () => {
    console.log(`üîÑ Stopping Realm subscription for user poops: ${userEmail}`);
    clearInterval(interval);
  };
};